<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAICAQAAAAAADoAgAAJgAAACAgAAAAAAAAqAgAAA4DAAAoAAAAIAAAAEAAAAABAAQAAAAAAIAC
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAgAAAAICAAIAAAACAAIAAgIAAAMDAwACAgIAAAAD/AAD/
        AAAA//8A/wAAAP8A/wD//wAA////AAiAAAAAAAAAAAAAAAAAAAAJmZmf/3d3d3d3d393d3dwCQAAAAAA
        AAAAAAAAAAAAcAkHd3cRERFwAIf/eICBgHAJB3d3ARERgABwCIeAgYDwCQd3d3ABEYh3iIgQcIEQ8AcH
        d3d3cIh3d3d4gYgREPAHB3d3d3h3d3d3d4iIARDwBwd3d3eHeHd3d3d4iIiA8AcHF3d3h3//d//3cXh4
        gPAHBxd3d4f/93E//xF3iIDwBwcXd3eH93dwH/ERj4hw8AcHF3cXc/d3cBEREYjxEPAHBxF3F3D3cRAR
        ERiI+BDwBwcRdxFwF3cREYGIGHEQ8AcHEXcREBd//xERcYiBEPgHBxgXCBCH////F/iIERD4BwcYgRAR
        h3//9x/xgREQ+AcHcXgQCHd393cfcYEREHgHB3F3gQh3d3hxhxERERB4Bwdxf/gREXcRGIEREREQeAeH
        dw//dxERF4h4GIEYgHgHeIgRj3GBgReBeIiIEYB4D4f/gRAYgXEXgXeAF4EQeA+HcRABh4h4H3CHgQh4
        EHgPh3d3AXcX+A9wj3EBhxB4Dwd3dwj4B/gPcBf4AYdweA8Hd3AX8Q9wB3AI+BAYcHgPB3dwH3AfcBdw
        CHdwARB4DwAAAAAAAAAAAAAAAAAAeA//////////////93d3d3gAAACIiIiIiIiIiIiIiIiIAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAoAAAAIAAAAEAAAAABAAgAAAAAAIAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAgAAAAICAAIAA
        AACAAIAAgIAAAMDAwADA3MAA8MqmAAQEBAAICAgADAwMABEREQAWFhYAHBwcACIiIgApKSkAVVVVAE1N
        TQBCQkIAOTk5AIB8/wBQUP8AkwDWAP/szADG1u8A1ufnAJCprQAAADMAAABmAAAAmQAAAMwAADMAAAAz
        MwAAM2YAADOZAAAzzAAAM/8AAGYAAABmMwAAZmYAAGaZAABmzAAAZv8AAJkAAACZMwAAmWYAAJmZAACZ
        zAAAmf8AAMwAAADMMwAAzGYAAMyZAADMzAAAzP8AAP9mAAD/mQAA/8wAMwAAADMAMwAzAGYAMwCZADMA
        zAAzAP8AMzMAADMzMwAzM2YAMzOZADMzzAAzM/8AM2YAADNmMwAzZmYAM2aZADNmzAAzZv8AM5kAADOZ
        MwAzmWYAM5mZADOZzAAzmf8AM8wAADPMMwAzzGYAM8yZADPMzAAzzP8AM/8zADP/ZgAz/5kAM//MADP/
        /wBmAAAAZgAzAGYAZgBmAJkAZgDMAGYA/wBmMwAAZjMzAGYzZgBmM5kAZjPMAGYz/wBmZgAAZmYzAGZm
        ZgBmZpkAZmbMAGaZAABmmTMAZplmAGaZmQBmmcwAZpn/AGbMAABmzDMAZsyZAGbMzABmzP8AZv8AAGb/
        MwBm/5kAZv/MAMwA/wD/AMwAmZkAAJkzmQCZAJkAmQDMAJkAAACZMzMAmQBmAJkzzACZAP8AmWYAAJlm
        MwCZM2YAmWaZAJlmzACZM/8AmZkzAJmZZgCZmZkAmZnMAJmZ/wCZzAAAmcwzAGbMZgCZzJkAmczMAJnM
        /wCZ/wAAmf8zAJnMZgCZ/5kAmf/MAJn//wDMAAAAmQAzAMwAZgDMAJkAzADMAJkzAADMMzMAzDNmAMwz
        mQDMM8wAzDP/AMxmAADMZjMAmWZmAMxmmQDMZswAmWb/AMyZAADMmTMAzJlmAMyZmQDMmcwAzJn/AMzM
        AADMzDMAzMxmAMzMmQDMzMwAzMz/AMz/AADM/zMAmf9mAMz/mQDM/8wAzP//AMwAMwD/AGYA/wCZAMwz
        AAD/MzMA/zNmAP8zmQD/M8wA/zP/AP9mAAD/ZjMAzGZmAP9mmQD/ZswAzGb/AP+ZAAD/mTMA/5lmAP+Z
        mQD/mcwA/5n/AP/MAAD/zDMA/8xmAP/MmQD/zMwA/8z/AP//MwDM/2YA//+ZAP//zABmZv8AZv9mAGb/
        /wD/ZmYA/2b/AP//ZgAhAKUAX19fAHd3dwCGhoYAlpaWAMvLywCysrIA19fXAN3d3QDj4+MA6urqAPHx
        8QD4+PgA8Pv/AKSgoACAgIAAAAD/AAD/AAAA//8A/wAAAP8A/wD//wAA////AAoTEwoKCgoKCgoKCgoK
        CgoKCgoKCgoKCgoKCgoKCgoKCk1NTU1NTfT09PHx8fHx8fHx8fHx8fH0GhoaGhoaGgoKTQoKCgoKCgoK
        CgoKCgoKCgoKCgoKCgoKCgoKCgoaCgpNCrW1tbW1REREREVEvUNDQxO9///vE+pDdEVuChoKCk0KtbW1
        tbUQRERERER0Q0NDvUND6urvbkN0RG4K/woKTQq1tbW1tbUQEERERG5vk5Nvb24SREPvQ3RERQr/Cgp1
        CrW1tbW1tbW1EG5vmpqampqTk29uRBJ0REVFCv8KCnUKtbW1tbW1tbUSkxqTmpqampqTk29ubhIQREQK
        /woK8Qq1tbW1tbW1EpOabxoaGhqampqTk29vb28SEgr/CgrxCrVFtbW1tbVuGhr/w8Madf//w5qTRZNv
        k28SCv8KCvEKtUW1tbW1tW4aw8PDGppFTP//w0VFk3Vub28K/woK8Qq1RbW1tbW1bhr/GhqamhBF/8NF
        REVvw29vmgr/CgrxCrVFtbW1RLW1S/+ampqTEERFRURERW9uw0VFCv8KCvEKtUVEtbVEtbUQ/5qaREQQ
        REREREVvb27Db0UK/woK8Qq1RUS1tUVEtRBEmhqaRERERG9FdG9EbnVFRQr/CgrxCrVFRbW1RUREEESa
        GsPDw0RERER1RG9ub0VECv8TCvEKtUVvRLURb0QQb5rD/////8NFdcNvbm5ERUUK/xMK8Qq1RW9vREQR
        RURvGhrDw8PDmkX/w0VuRERFRAr/EwrxCrW1RXVvRRERbpMaGhrDGpqTRcN1RW5EREVFCsITCvEKtbVE
        dXVvRRFvk5OampNvk0VvdUVFRUVERUUKwm0K8Qq1tUR1w8NvRUVFRZOTRUVFb29FRUVFRERFRQrCbQrx
        b7W1tRHDw8N1dUVFRUVFdW9vdW9Fb29FRW9vCsJtCvF1b29vRUVvw3VFb0VvRUWab0Wab29vb29FRW8K
        wm0KwxN1w8NvRUURRW9vRXVFRZpvRZp1bxFFmm9FRQrCbQrDE7W1RUUREUVvmm9vmm9Fw5QRb5pvRRFv
        mm9ECsLsCsMTtbW1tbURRZqaRZrDbxHDlBFvw3VFEUVvmkUKwuwKwwq1tbW1tRFvw28RmsNvEcOaEUWa
        w28RRG+amgrC7ArDCrW1tbURRZrDRRHDmhERmpoREW/Db0URRG+aCsLsCsMKtbW1tRFFw5oRRcOaEUV1
        mhERb5p1dRERREUKwuwKwwoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgrC7ArDw8P/////////////
        ////////////wsLCwsLCwsLsCgoKCgoKbW1tbezs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OwAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
</value>
  </data>
</root>